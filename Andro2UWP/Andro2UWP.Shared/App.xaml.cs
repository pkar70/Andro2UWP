
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.ApplicationModel;
using Windows.ApplicationModel.Activation;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;

namespace Andro2UWP
{
    sealed partial class App : Application
    {

#region "autogenerated"
        public App()
        {
            ConfigureFilters(global::Uno.Extensions.LogExtensionPoint.AmbientLoggerFactory);

            this.InitializeComponent();
            //this.Suspending += OnSuspending;
        }

        protected override void OnLaunched(LaunchActivatedEventArgs e)
        {
#if DEBUG
            if (System.Diagnostics.Debugger.IsAttached)
            {
                // this.DebugSettings.EnableFrameRateCounter = true;
            }
#endif
            Frame rootFrame = Windows.UI.Xaml.Window.Current.Content as Frame;

            // Do not repeat app initialization when the Window already has content,
            // just ensure that the window is active
            if (rootFrame == null)
            {
                // Create a Frame to act as the navigation context and navigate to the first page
                rootFrame = new Frame();

                rootFrame.NavigationFailed += OnNavigationFailed;

                // PKAR added wedle https://stackoverflow.com/questions/39262926/uwp-hardware-back-press-work-correctly-in-mobile-but-error-with-pc
                rootFrame.Navigated += OnNavigatedAddBackButton;
                Windows.UI.Core.SystemNavigationManager.GetForCurrentView().BackRequested += OnBackButtonPressed;

                //if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)
                //{
                //    //TODO: Load state from previously suspended application
                //}

                // Place the frame in the current Window
                Windows.UI.Xaml.Window.Current.Content = rootFrame;
            }

#if NETFX_CORE
            if (e.PrelaunchActivated != false) return;
#endif
            if (rootFrame.Content == null)
            {
                // When the navigation stack isn't restored navigate to the first page,
                // configuring the new page by passing required information as a navigation
                // parameter
                rootFrame.Navigate(typeof(MainPage), e.Arguments);
            }
            // Ensure the current window is active
            Windows.UI.Xaml.Window.Current.Activate();
        }

        void OnNavigationFailed(object sender, NavigationFailedEventArgs e)
        {
            throw new Exception($"Failed to load {e.SourcePageType.FullName}: {e.Exception}");
        }

        //private void OnSuspending(object sender, SuspendingEventArgs e)
        //{
        //    var deferral = e.SuspendingOperation.GetDeferral();
        //    //TODO: Save application state and stop any background activity
        //    deferral.Complete();
        //}

        static void ConfigureFilters(ILoggerFactory factory)
        {
            factory
                .WithFilter(new FilterLoggerSettings
                    {
                        { "Uno", LogLevel.Warning },
                        { "Windows", LogLevel.Warning },

						// Debug JS interop
						// { "Uno.Foundation.WebAssemblyRuntime", LogLevel.Debug },

						// Generic Xaml events
						// { "Windows.UI.Xaml", LogLevel.Debug },
						// { "Windows.UI.Xaml.VisualStateGroup", LogLevel.Debug },
						// { "Windows.UI.Xaml.StateTriggerBase", LogLevel.Debug },
						// { "Windows.UI.Xaml.UIElement", LogLevel.Debug },

						// Layouter specific messages
						// { "Windows.UI.Xaml.Controls", LogLevel.Debug },
						// { "Windows.UI.Xaml.Controls.Layouter", LogLevel.Debug },
						// { "Windows.UI.Xaml.Controls.Panel", LogLevel.Debug },
						// { "Windows.Storage", LogLevel.Debug },

						// Binding related messages
						// { "Windows.UI.Xaml.Data", LogLevel.Debug },

						// DependencyObject memory references tracking
						// { "ReferenceHolder", LogLevel.Debug },
					}
                )
#if DEBUG
                .AddConsole(LogLevel.Debug);
#else
                .AddConsole(LogLevel.Information);
#endif
        }

        #endregion

        #region "BackButton"
        // PKAR added wedle https://stackoverflow.com/questions/39262926/uwp-hardware-back-press-work-correctly-in-mobile-but-error-with-pc
        private void OnNavigatedAddBackButton(object sender, NavigationEventArgs e)
        {
            var oFrame = sender as Frame;
            if (oFrame == null)
                return;

            Windows.UI.Core.SystemNavigationManager oNavig = Windows.UI.Core.SystemNavigationManager.GetForCurrentView();

            if (oFrame.CanGoBack)
                oNavig.AppViewBackButtonVisibility = Windows.UI.Core.AppViewBackButtonVisibility.Visible;
            else
                oNavig.AppViewBackButtonVisibility = Windows.UI.Core.AppViewBackButtonVisibility.Collapsed;
        }

        private void OnBackButtonPressed(object sender, Windows.UI.Core.BackRequestedEventArgs e)
        {
            try
            {
                if ((Windows.UI.Xaml.Window.Current.Content as Frame).CanGoBack)
                    (Windows.UI.Xaml.Window.Current.Content as Frame).GoBack();
                e.Handled = true;
            }
            catch
            {
            }
        }
        #endregion

        //public static string _timerString = "";
        //public static int _timerCount = 0;

        // ale po co to?
        //protected override void OnBackgroundActivated(BackgroundActivatedEventArgs args)
        //{
        //    var _task = args.TaskInstance;
        //    _timerCount++;
        //    _timerString = _timerString + DateTime.Now.ToString() + ", name=" + _task.Task.Name + "\n";
        //}

        //public static void OnTimerActivated()
        //{
        //    _timerCount++;
        //    _timerString = _timerString + DateTime.Now.ToString() + ", STATIC\n";
        //}

        // RemoteSystems, Timer
        protected override async void OnBackgroundActivated(BackgroundActivatedEventArgs args)
        {
            p.k.DebugOut("OnBackgroundActivated started");

            var moTaskDeferal = args.TaskInstance.GetDeferral(); // w pkarmodule.App

            if (args.TaskInstance.Task.Name == "Andro2UWP_Timer")
            {
                int iStanPrzed = App.gToasty.Count;
                p.k.DebugOut("iStanPrzed = " + iStanPrzed.ToString());

                await WczytajNowosci(false);
                int iNewCnt = App.gToasty.Count - iStanPrzed;
                p.k.DebugOut("iStanPo = " + App.gToasty.Count.ToString());
                if (iNewCnt > 0)
                {
                    p.k.MakeToast(iNewCnt.ToString() + " nowy powiadomień z Android");
                }
            }

            //' lista komend danej aplikacji
            //Dim sLocalCmds As String = "add CHANNEL" & vbTab & "dodanie kanału"

            //' zwroci false gdy to nie jest RemoteSystem; gdy true, to zainicjalizowało odbieranie
            //If Not bObsluzone Then bNoComplete = RemSysInit(args, sLocalCmds)

            //if Not bNoComplete Then moTaskDeferal.Complete()
            moTaskDeferal.Complete();
        }

        public async static System.Threading.Tasks.Task<bool> WczytajNowosci(bool bMsg)
        {
            p.k.DebugOut("WczytajNowosci(" + bMsg.ToString());
            if (!await initODandDict(bMsg)) return false;     // przede wszystkim - odczytanie slownikow na nowo (żeby nie było reset słownika!)
            await WczytajNowe(bMsg);
            return true;
        }

        public static async System.Threading.Tasks.Task<bool> EnsureOneDriveOpen(bool bMsg)
        {
            if (!p.k.NetIsIPavailable(true))
            {
                p.k.DebugOut("EnsureOneDriveOpen - no IP network");
                return false;
            }

#if __ANDROID__ 
            if (App.gOnedrive != null)
                return true;

                await App.AddLogEntry("inicjalizacja gOneDrive",true);
                Uno.OneDrive.Connector.Init(Android.App.Application.Context);

                string[] scopes = { "Files.ReadWrite" };
                App.gOnedrive = new Uno.OneDrive.Connector("287faaf5-69f4-46e7-977e-1980e19790d0", scopes);
            
            // await App.gOnedrive.DisconnectAsync();
            
            if (!await App.gOnedrive.ConnectAsync())
                {
                    await App.AddLogEntry("FAIL initializing OneDrive",false);
                    await p.k.DialogBoxResAsync("errOneDriveInit");
                    return false;
                }

            if (App.gAppFolder is null)
            {   // to jest to samo niezaleznie od on/off samego konektora
                await App.AddLogEntry("inicjalizacja gAppFolder",true);
                App.gAppFolder = await App.gOnedrive.GetThisAppFolderAsync();
            }
#else
            if (p.od.IsOneDriveOpened())
                return true;

            // if (!bMsg) return false;

            try
            {
                if (!await p.od.OpenOneDrive(true, bMsg))
                    return false;

                return true;
            }
            catch 
            {
            }

            p.k.DebugOut("EnsureOneDriveOpen - catch p.od.OpenOneDrive");
            return false;
#endif



        }

        private static async System.Threading.Tasks.Task WczytajSlownikFiltrow()
        {
            p.k.DebugOut("WczytajSlownikFiltrow");

            string dictionaryFile = "";
#if __ANDROID__ 
            dictionaryFile = await App.gOnedrive.ReadFile(App.gAppFolder, "toasts.filters.txt");
#else
            dictionaryFile = await p.od.ReadOneDriveTextFile("Apps/Andro2UWP/toasts.filters.txt");
#endif


            if (string.IsNullOrEmpty(dictionaryFile))
            {
                await App.AddLogEntry("No or empty toasts.filters.txt file", false);
            }
            else
            {
                App.glFiltry.Clear();
                var dictEntries = dictionaryFile.Split('\n');
                foreach (string entry in dictEntries)
                {
                    if (!string.IsNullOrEmpty(entry))
                    {
                        var fields = entry.Split('|');
                        if (fields.GetUpperBound(0) == 2)
                        {
                            App.glFiltry.Add(new App.JedenFiltr(fields[0].Trim(), fields[1].Trim(), fields[2].Trim()));
                            await App.AddLogEntry("Entry: '" + fields[0].Trim() + "', '" + fields[1].Trim() + "', '" + fields[2].Trim() + "'", true);
                        }
                    }

                }

                await App.AddLogEntry("Read " + App.glFiltry.Count.ToString() + " toasts.filters entries", false);
            }
            // przeniesienie tego co uzywam z hardcoded do slownika (pozniej: do pliku)
            //App.glFiltry.Add(new App.JedenFiltr("com.microsoft.skydrive", "Preparing...", ""));
            //App.glFiltry.Add(new App.JedenFiltr("com.whatsapp", "", "Checking for new messages"));
            //App.glFiltry.Add(new App.JedenFiltr("com.whatsapp", "", "WhatsApp Web is currently active"));
            //App.glFiltry.Add(new App.JedenFiltr("com.google.android.music", "Downloading…", ""));
            //App.glFiltry.Add(new App.JedenFiltr("com.google.android.apps.nbu.files", "", "Memes are taking up space"));
            //App.glFiltry.Add(new App.JedenFiltr("android", "* is using battery", ""));
            //App.glFiltry.Add(new App.JedenFiltr("com.android.vending", "* new updates", ""));
            //App.glFiltry.Add(new App.JedenFiltr("com.microsoft.skydrive", "Backing up your photos...", ""));
        }

        private async static System.Threading.Tasks.Task WczytajSlownikSource()
        {
            p.k.DebugOut("WczytajSlownikSource");
            string dictionaryFile = "";
#if __ANDROID__ 
            dictionaryFile = await App.gOnedrive.ReadFile(App.gAppFolder, "sender.renames.txt");
#else
            dictionaryFile = await p.od.ReadOneDriveTextFile("Apps/Andro2UWP/sender.renames.txt");
#endif
            if (string.IsNullOrEmpty(dictionaryFile))
            {
                await App.AddLogEntry("No or empty sender.renames.txt file", false);
                return;
            }

            App.gdSenderRenames.Clear();
            var dictEntries = dictionaryFile.Split('\n');
            foreach (string entry in dictEntries)
            {
                if (!string.IsNullOrEmpty(entry))
                {
                    int ind = entry.IndexOf("|");
                    if (ind > 2)
                    {
                        App.gdSenderRenames.Add(entry.Substring(0, ind).Trim(), entry.Substring(ind + 1).Trim());
                        await App.AddLogEntry("Entry: '" + entry.Substring(0, ind).Trim() + "' » '" + entry.Substring(ind + 1).Trim() + "'", true);
                    }
                }

            }
            await App.AddLogEntry("Read " + App.gdSenderRenames.Count.ToString() + " sender.renames entries", false);
        }

        private static async System.Threading.Tasks.Task<bool> CheckPkarFile()
        {
            p.k.DebugOut("CheckPkarFile");
            string dictionaryFile = "";
#if __ANDROID__ 
            dictionaryFile = await App.gOnedrive.ReadFile(App.gAppFolder, "pkar.mode.txt");
#else
            dictionaryFile = await p.od.ReadOneDriveTextFile("Apps/Andro2UWP/pkar.mode.txt");
#endif
            if (string.IsNullOrEmpty(dictionaryFile)) return false;

            return true;
        }

        public static async System.Threading.Tasks.Task<bool> initODandDict(bool bMsg)
        {
            p.k.DebugOut("initODandDict(" + bMsg.ToString());

            //ProgresywnyRing(true);
            if (bMsg) p.k.ProgRingShow(true);

            if (!await EnsureOneDriveOpen(bMsg))
            {
                p.k.DebugOut("initODandDict - nie mam OneDrive");
                //ProgresywnyRing(false);
                if (bMsg) p.k.ProgRingShow(false);
                return false;
            }

            // wczytaj tylko wtedy, gdy się podłączyłeś do OneDrive
            await WczytajSlownikSource(); //ZAWISA(ło) TU NA CZYTANIU! nie ma progressringa!
            await WczytajSlownikFiltrow();

            p.k.SetSettingsBool("pkarMode", await CheckPkarFile());

            //ProgresywnyRing(false);
            if (bMsg) p.k.ProgRingShow(false);

            p.k.SetSettingsBool("wasInit", true);

            return true;
        }

        private async static System.Threading.Tasks.Task WczytajNowe(bool bMsg)
        {
            p.k.DebugOut("WczytajNowe(" + bMsg.ToString());

            if (!p.k.GetPlatform("uwp"))
            {
                if(bMsg) await p.k.DialogBoxAsync("jakim cudem nacisnales to nie bedac na UWP?");
                return;
            }

            if (!p.k.NetIsIPavailable(false))
            {
                if (bMsg) await p.k.DialogBoxAsync("errNoNetwork");
                return;
            }

            if (bMsg) p.k.ProgRingShow(true);

            // wczytujemy z OneDrive listę - na razie na guzik, później może timerowo (desktop: ciągle w sieci, telefon - rzadko)
            await DoczytajListeToastow(bMsg);   // dir *toast.txt

            // oraz ich zawartosc - z progressbar
            await DoczytajTresci(bMsg);

            if (bMsg) p.k.ProgRingShow(false);

        }

        private static async System.Threading.Tasks.Task DoczytajListeToastow(bool bMsg)
        {
            p.k.DebugOut("DoczytajListeToastow");
            // dwie kontrole, ktore juz powinny byc dawno zrobione (w funkcji WczytajNowe), ale na wszelki wypadek
            if (!p.k.GetPlatform("uwp"))
            {
                if (bMsg) await p.k.DialogBoxAsync("jakim cudem nacisnales to nie bedac na UWP?");
                return;
            }

            if (!p.k.NetIsIPavailable(false))
            {
                if (bMsg) await p.k.DialogBoxResAsync("errNoNetwork");
                return;
            }

#if !__ANDROID__
            if (!p.od.IsOneDriveOpened())
                await p.od.OpenOneDrive(true, bMsg);

            System.Collections.ObjectModel.Collection<Microsoft.OneDrive.Sdk.Item> filesy =
                    await p.od.OneDriveGetAllChildsSDK("Apps/Andro2UWP/", false, true);

            // App.gToasty.Clear();
            foreach (var filek in filesy)
            {
                string fileNameData = filek.Name;
                string sTmp = "";

                if (!fileNameData.EndsWith(".toast.txt"))
                    continue;   // to nie jest plik z toastem


                // sprawdzamy czy juz takiego nie mamy przypadkiem - jesli tak, to nie wczytujemy
                bool bAlready = false;
                foreach (var oldToast in App.gToasty)
                {
                    if (oldToast.sFileName == fileNameData)
                    {
                        bAlready = true;
                        break;
                    }
                }
                if (bAlready)
                    continue;

                var toast = new App.JedenToast();
                toast.sFileName = fileNameData;

                fileNameData = fileNameData.Replace(".toast.txt", "");

                int iInd = fileNameData.LastIndexOf("-");
                sTmp = fileNameData.Substring(iInd + 1); // sTmp == oItem.dDate.ToString("yyyy.MM.dd_HH.mm")
                fileNameData = fileNameData.Substring(0, iInd);
                toast.displayDate = sTmp.Replace("_", " "); // w pliku jest podkreslenie jako separator daty i czasu
                //public DateTimeOffset dDate; - nie uzywana do ListItems

                iInd = fileNameData.LastIndexOf(".");
                sTmp = fileNameData.Substring(iInd + 1); // sTmp == oItem.iNumber.ToString("00000")
                int iNumber;
                int.TryParse(sTmp, out iNumber);
                toast.iNumber = iNumber;

                toast.sDevice = fileNameData.Substring(0, iInd);
                toast.displayDevice = "";   // na razie, bo tylko jeden; potem można dopisywać device... w settings?

                toast.sOneDriveFileId = filek.Id;
                toast.sSource = "TOBEREAD";

                App.gToasty.Add(toast);
            }
#endif
        }

        private static async System.Threading.Tasks.Task DoczytajTresci(bool bMsg)
        {
            // dwie kontrole, ktore juz powinny byc dawno zrobione (w funkcji WczytajNowe), ale na wszelki wypadek
            if (!p.k.GetPlatform("uwp"))
            {
                if (bMsg) await p.k.DialogBoxAsync("jakim cudem nacisnales to nie bedac na UWP?");
                return;
            }

            if (!p.k.NetIsIPavailable(false))
            {
                if (bMsg) await p.k.DialogBoxAsync("errNoNetwork");
                return;
            }

            int iToBeRead = 0;
            for (int iLp = 0; iLp < App.gToasty.Count; iLp++)
            {
                if (App.gToasty.ElementAt(iLp).sSource == "TOBEREAD")
                {
                    iToBeRead++;
                }
            }

            if (bMsg) p.k.ProgRingShow(true, false, 0, iToBeRead);
            if (bMsg) p.k.ProgRingVal(0);
            //uiProgBar.Maximum = iToBeRead;
            //uiProgBar.Value = 0;
            //uiProgBar.Visibility = Visibility.Visible;

#if !__ANDROID__
            if (!p.od.IsOneDriveOpened())
                await p.od.OpenOneDrive(true, bMsg);

            iToBeRead = 0;
            for (int iLp = 0; iLp < App.gToasty.Count; iLp++)
            {
                var toast = App.gToasty.ElementAt(iLp);

                if (toast.sSource == "TOBEREAD")
                {
                    toast.sMessage = await p.od.ReadOneDriveTextFileId(toast.sOneDriveFileId);

                    var linie = toast.sMessage.Split('\n');
                    foreach (var linia in linie)
                    {
                        // sendToUWP = sendToUWP + "Sender: " + e.PackageName + "\n";
                        if (linia.StartsWith("Sender: "))
                        {
                            toast.sSource = linia.Substring(8).Trim();
                            break;
                        }
                    }
                    // uiProgBar.Value = ++iToBeRead;
                    if (bMsg) p.k.ProgRingInc();
                }
            }
#endif
            if (bMsg) p.k.ProgRingShow(false);
            //uiProgBar.Visibility = Visibility.Collapsed;

        }

        protected override void OnActivated(IActivatedEventArgs e)
        {
            Frame rootFrame;
            rootFrame = Window.Current.Content as Frame; // probujemy zlapac toast

            // Do not repeat app initialization when the Window already has content,
            // just ensure that the window is active

            if (rootFrame == null)
            {
                // Create a Frame to act as the navigation context and navigate to the first page
                rootFrame = new Frame();

                rootFrame.NavigationFailed += OnNavigationFailed;

                // Place the frame in the current Window
                Window.Current.Content = rootFrame;
            }

            if (rootFrame.Content == null)
                // MakeDebugToast("OnActivated - OPEN NULL")
                rootFrame.Navigate(typeof(MainPage));

            Window.Current.Activate();
        }

#region "logfile"
        public static async System.Threading.Tasks.Task<Windows.Storage.StorageFile> GetLogFile()
        {
            Windows.Storage.StorageFolder oFold = Windows.Storage.ApplicationData.Current.LocalFolder;
            return await oFold.CreateFileAsync("applog.txt", Windows.Storage.CreationCollisionOption.OpenIfExists);
        }


        public static async System.Threading.Tasks.Task AddLogEntry(string message, bool onlyInDebug)
        {
            p.k.DebugOut(2, message);
            System.Diagnostics.Debug.WriteLine("---PKAR--- " + message);

            if (onlyInDebug && !p.k.GetSettingsBool("debugLog"))
                return;

            var oFile = await GetLogFile();
            if (oFile is null) return;

            try
            {
                await Windows.Storage.FileIO.AppendTextAsync(oFile, message + "\n", Windows.Storage.Streams.UnicodeEncoding.Utf8);
            }
            catch
            {
                // bo moze jak jest za szybko jedno po drugim, to robi sie deadlock, i Exception i dlatego czasem app przestaje dziaiałać?
            }

        }


        #endregion


        public static List<JedenToast> gToasty = new List<JedenToast>();
        public static string gsDeviceName = "default";
        public static bool gbPrzechwytuj = false;
        public static int giCurrentNumber = 0;

        public static Dictionary<string, string> gdSenderRenames = new Dictionary<string, string>();
        public static List<JedenFiltr> glFiltry = new List<JedenFiltr>();

#if __ANDROID__
        public static Uno.OneDrive.Connector gOnedrive = null;
        public static Uno.OneDrive.FileData gAppFolder = null;


        static bool bInOneDriveSending = false;

        public async void ZapiszToast(JedenToast toast)
        {
            // uzupelnij dane - mamy tylko czas i glowny tekst
            toast.sDevice = gsDeviceName;
            toast.iNumber = ++giCurrentNumber;
            p.k.SetSettingsInt("currentFileNum", giCurrentNumber);
            await AddLogEntry("numer kolejny: " + giCurrentNumber, true);

            gToasty.Add(toast);

            if (!p.k.NetIsIPavailable(false))
            {
                await AddLogEntry("no network present", false);
                return;
            }

            // teraz mamy wysylanie

            // zabezpieczenie przed wysylaniem w równoległych wątkach przy szybkiej serii Toastów
            if (bInOneDriveSending) return;
            bInOneDriveSending = true;

            // jesli jest siec, to mozemy wyslac do OneDrive wszystkie ktorych jeszcze sie nie wyslalo
            for (int iLoop = 0; iLoop < gToasty.Count; iLoop++)
            {
                var oItem = gToasty.ElementAt(iLoop);

                if (oItem.bOnOneDrive) continue;    // juz wyslany

                oItem.bOnOneDrive = true;   // przed zwłoką zapisywania, by następny szybki toast już tego nie próbował!

                oItem.sFileName = gsDeviceName + "." + oItem.iNumber.ToString("00000") + "-" +
                    oItem.dDate.ToString("yyyy.MM.dd_HH.mm") + ".toast.txt";
                await AddLogEntry("filename: " + oItem.sFileName, false);

                Uno.OneDrive.FileData oSent = await gOnedrive.SaveFile(gAppFolder, oItem.sFileName, oItem.sMessage);

                // jesli sie nie udalo wyslanie, to nie wysylaj nastepnych
                if (oSent is null)
                {
                    await AddLogEntry("FAIL saving OneDrive file - skipping ", false);
                    oItem.bOnOneDrive = false;  // zaznacz, że jednak się nie udało wysłać
                    break;
                }

                oItem.bOnOneDrive = true;
            }

            bInOneDriveSending = false;
        }

        #region "handling accessiblity trigger"

        //<service>
        // <meta-data
        //  android:resource="@xml/service_config" />
        //  </service>
        // oraz plik service_config w katalogu....
        //    <accessibility-service
        //android:description="@string/accessibility_service_description"
        // https://developer.android.com/guide/topics/ui/accessibility/service
        ///>

        [Android.App.Service(Permission = "android.permission.BIND_ACCESSIBILITY_SERVICE")]
        [Android.App.IntentFilter(new String[] { "android.accessibilityservice.AccessibilityService" })]
        [Android.App.MetaData("android.accessibilityservice", Resource = "@xml/accessibilityserviceinfo")]
        public class AndroToast : Android.AccessibilityServices.AccessibilityService
        {

            private string GlueString(string input, Android.OS.Bundle extras, string prefix, string extraName )
            {
                if(extras is null) return input;

                var appendix = extras.GetString(extraName);

                if (string.IsNullOrEmpty(appendix))
                    return input;   // nie ma co dodac - nie tracimy linii (\n)

                if (input.Contains(": " + appendix))
                    return input;   // ale to cos juz bylo zapisane (np. Title i TitleBig), wiec po co mnozyc dlugosc... 
                
                return input + prefix + ": " + appendix + "\n";
            }

            private string GlueString(string input, string value, string prefix)
            {

                if (string.IsNullOrEmpty(value))
                    return input;   // nie ma co dodac - nie tracimy linii (\n)

                if (input.Contains(": " + value))
                    return input;   // ale to cos juz bylo zapisane (np. Title i TitleBig), wiec po co mnozyc dlugosc... 

                return input + prefix + ": " + value + "\n";
            }


            private static bool FiltrOdrzuca(string sPackageName, string sTitle, string sText)
            {
                AddLogEntry("toast: " + sPackageName + ", " + sTitle + ", " + sText + ", versus " + glFiltry.Count + " filtrów", true);

                foreach (var filtr in glFiltry)
                {
                    AddLogEntry("probuje filtr: " + filtr.sPackageName + ", " + filtr.sTitle + ", " + filtr.sText, true);

                    if (!string.IsNullOrEmpty(filtr.sPackageName) && filtr.sPackageName != sPackageName) continue;
                    AddLogEntry("packagename ZGODNY", true);

                    if (!string.IsNullOrEmpty(filtr.sTitle))
                    {
                        if (filtr.sTitle.StartsWith("*"))
                        {
                            if (filtr.sTitle.EndsWith("*"))
                            {
                                if (!sTitle.Contains(filtr.sTitle.Substring(1, filtr.sTitle.Length - 2))) continue;
                                AddLogEntry("title match Contains", true);
                            }
                            else
                            {
                                if (!sTitle.EndsWith(filtr.sTitle.Substring(1))) continue;
                                AddLogEntry("title match EndsWith", true);
                            }
                        }
                        else
                        {
                            if (filtr.sTitle.EndsWith("*"))
                            {
                                if (!sTitle.StartsWith(filtr.sTitle.Substring(0, filtr.sTitle.Length - 1))) continue;
                                AddLogEntry("title match StartsWith", true);
                            }
                            else
                               if (filtr.sTitle != sTitle) continue;
                        }
                    }
                    AddLogEntry("title ZGODNY", true);

                    if (!string.IsNullOrEmpty(filtr.sText))
                    {
                        if (filtr.sText.StartsWith("*"))
                        {
                            if (filtr.sText.EndsWith("*"))
                            {
                                if (!sTitle.Contains(filtr.sText.Substring(1, filtr.sText.Length - 2))) continue;
                                AddLogEntry("text match Contains", true);
                            }
                            else
                            {
                                if (!sText.EndsWith(filtr.sText.Substring(1))) continue;
                                AddLogEntry("text match EndsWith", true);
                            }
                        }
                        if (filtr.sText.EndsWith("*"))
                            if (!sText.StartsWith(filtr.sText.Substring(0, filtr.sText.Length - 1))) continue;
                        if (filtr.sText != sText) continue;
                    }
                    AddLogEntry("text ZGODNY", true);

                    return true;
                }

                return false;
            }



            public override void OnAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent e)
            {
                if (!App.gbPrzechwytuj)
                {
                    AddLogEntry("\n*************************************************************", true);
                    AddLogEntry("ignoruje, bo !App.gbPrzechwytuj", true);
                    return;
                }

                AddLogEntry("\n*************************************************************", false);
                //AddLogEntry("Andro2UWP:App:OnAccessibilityEvent called");

                if (e.EventType != Android.Views.Accessibility.EventTypes.NotificationStateChanged)
                {
                    AddLogEntry("ignoruje, bo !EventTypes.NotificationStateChanged", false);
                    return;
                }


                var androToast = (Android.App.Notification)e.ParcelableData;
                if(androToast is null)
                {

                    AddLogEntry("ignoruje, bo !androToast (znaczy messageBox?)", false);
                    return;
                }


                // tu ewentualnie mozna dodac filtrowanie toastów (np. z niechcianych senderów)

                JedenToast toastek = new JedenToast();
                toastek.dDate = DateTimeOffset.FromUnixTimeMilliseconds(androToast.When).ToLocalTime();
                // public string sSource; // czyżby tego się nie dało osiągnąć??
                // public string sMessage;

                // najpierw data nadejscia
                // Toast ma czas jako ms od ostatniego boot
                // https://stackoverflow.com/questions/55030433/android-accessibilityservice-geteventtime-time-format
                //long bootTime = Java.Lang.JavaSystem.CurrentTimeMillis() - Android.OS.SystemClock.ElapsedRealtime();
                //long eventMillis = bootTime + e.EventTime; // ale to jest zle - za mało! @4 II o 04:33 a nie rzeczywisty 22 II.
                //// bo ElapsedRealtime wlacza deep sleep, a SystemClock.uptimeMillis()) - nie wlacza deep sleep
                //eventMillis = Java.Lang.JavaSystem.CurrentTimeMillis() - e.EventTime;

                //string sendToUWP = "Notification @" + 
                //    DateTimeOffset.FromUnixTimeMilliseconds(eventMillis).ToString("dd-MM-yyyy HH:mm") + "\n\n";

                string sendToUWP = ""; // "Notification" + "\n\n"; - bez tego naglowka, bo po co...

                // ... która może być inna niż data wzięta z Notification
                if (string.IsNullOrEmpty(e.PackageName))
                    toastek.sSource = "[no PackageName]";
                else
                    toastek.sSource = e.PackageName;

                sendToUWP = sendToUWP + "Sender: " + toastek.sSource + "\n";
                sendToUWP = sendToUWP + "Date: " + toastek.dDate.ToString("dd-MM-yyyy HH:mm") + "\n";

                sendToUWP = GlueString(sendToUWP, androToast.Category, "Category");

                // 2021.07.18, ponieważ jakoby nie było pełnej informacji (np. fotka: że oddała na mnie głos, WhatsApp: treści powiadomień)
                string sEventText = ""; // "Event", bo z Event, a nie z Extras
                var lText = e.Text;
                if(lText != null)
                {
                    foreach (var sLine in lText)
                    {
                        sEventText = sEventText + sLine.ToString() + "\n";
                    }
                }

                // te dwa beda potem uzyte w filtrowaniu
                string sTitle = "";
                string sText = "";

                if (androToast.Extras != null)
                {
                    sTitle = androToast.Extras.GetString(Android.App.Notification.ExtraTitle);
                    if (sTitle is null)
                        sTitle = "";
                    sText = androToast.Extras.GetString(Android.App.Notification.ExtraText);
                    if (sText is null)
                        sText = "";

                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "BigText", Android.App.Notification.ExtraBigText);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Conversation", Android.App.Notification.ExtraConversationTitle);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Info", Android.App.Notification.ExtraInfoText);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Subtext", Android.App.Notification.ExtraSubText);
                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "Summary", Android.App.Notification.ExtraSummaryText);
                    sendToUWP = GlueString(sendToUWP, sText, "Text");
                    sendToUWP = GlueString(sendToUWP, sTitle, "Title");
                    sendToUWP = GlueString(sendToUWP, sEventText, "EventText");


                    sendToUWP = GlueString(sendToUWP, androToast.Extras, "TitleBig", Android.App.Notification.ExtraTitleBig);
                    if (androToast.Extras.GetStringArray(Android.App.Notification.ExtraTextLines) != null)
                    {
                        foreach (string str in androToast.Extras.GetStringArray(Android.App.Notification.ExtraTextLines))
                        {
                            sendToUWP = sendToUWP + "Line: " + str + "\n";
                        }
                    }
                }
                else
                    AddLogEntry("androToast.Extras is null", true);

                AddLogEntry("nowy toast:\n" + sendToUWP + "\n<end>", false);

                // te są zapisywane w ZapiszToast
                //public string sDevice;
                //public int iNumber;
                //public string sFileName;
                //public bool bOnOneDrive;

                // te są uzupełniane dopiero do wyświetlenia (z mainpage)
                //public string displayDate;
                //public string displayDevice;

                toastek.sMessage = sendToUWP;

                // drugie miejsce filtrowania

                //AddLogEntry("starting comparing, e.PackageName='" + e.PackageName + "', sTitle='" + sTitle + "'");

            // e.g. 
            //Text: Tap for details on battery and data usage
            //Title: OneDrive is using battery

            //Sender: com.android.vending
            //Date: 26 - 02 - 2020 08:05
            //Category: status
            //BigText: 34 updates total are pending
            //Title: 5 new updates

                //if (e.PackageName == "android" && sTitle.Contains(" is using battery") ||
                //    e.PackageName == "com.android.vending" && sTitle.Contains(" new updates") )
                //{
                //    AddLogEntry("ale podjalem decyzje zeby tego nie zapisywac (internal filter");
                //    return;
                //}

                if (FiltrOdrzuca(e.PackageName, sTitle, sText))
                {
                    AddLogEntry("ale mam to odfiltrować (plik filtrów)", false);
                    return;
                }

                // ponizsze są w pliku filtrów (a przynajmniej jego emulacji)
                //if (e.PackageName == "com.microsoft.skydrive" && sTitle == "Preparing...")
                //    bOk = false;

                //if (e.PackageName == "com.whatsapp")
                //{
                //    if (sText == "Checking for new messages" || sText == "WhatsApp Web is currently active")
                //        bOk = false;
                //}

                //if (e.PackageName == "com.google.android.music")
                //{
                //    if (sTitle == "Downloading…")
                //        bOk = false;
                //}

                ((App)App.Current).ZapiszToast(toastek);
            }

            public override void OnInterrupt()
            {
                AddLogEntry("Andro2UWP:App:OnInterrupt called!!!!!", true);
            }

            protected override void OnServiceConnected() 
            {
                AddLogEntry("Andro2UWP:App:OnServiceConnected called", true);
                base.OnServiceConnected();

                var servInfo = new Android.AccessibilityServices.AccessibilityServiceInfo();
                servInfo.EventTypes = Android.Views.Accessibility.EventTypes.NotificationStateChanged;
                servInfo.FeedbackType = Android.AccessibilityServices.FeedbackFlags.Generic;
                servInfo.Flags = Android.AccessibilityServices.AccessibilityServiceFlags.Default;
                // (a) deprecated (b) read-only
                //servInfo.Description = "If you want me to send Notifications to OneDrive (to UWP companion app), I need access to Notifications :)";
                //servInfo.NotificationTimeout = 100;
                // servInfo.PackageNames = null;   // all packages

                SetServiceInfo(servInfo);
            }

            public override bool OnUnbind(Android.Content.Intent intent)
            {
                AddLogEntry("Andro2UWP:App:OnUnbind called", true);
                return false;
            }
        }

        #endregion

#endif
        public class JedenToast
        {
            public string sDevice { get; set; }
            public DateTimeOffset dDate { get; set; }
            public string sSource { get; set; }
            public string sMessage { get; set; }
            public string sFileName { get; set; }
            public int iNumber { get; set; }
            public bool bOnOneDrive { get; set; }
            public string displayDate { get; set; }
            public string displayDevice { get; set; }
            public string displaySource { get; set; }
            public string sOneDriveFileId { get; set; }

            public string ToStringDebug()
            {
                string sTxt = ToString();
                sTxt += "\nDebug data:\n";
                sTxt += "Device: " + sDevice + "\n";
                sTxt += "Date: " + dDate.ToString("yyyy.MM.dd HH:mm:ss") + "\n";
                sTxt += "Source: " + sSource + "\n";
                sTxt += "FileNameDevice: " + sFileName + "\n";
                sTxt += "Number: " + iNumber + "\n";
                sTxt += "OneDriveFileId: " + sOneDriveFileId + "\n";
                sTxt += "bOnOneDrive: " + bOnOneDrive + "\n";
                return sTxt;
            }

            public override string ToString()
            {
                string sTxt = "";
                if (!string.IsNullOrEmpty(displayDevice)) sTxt += "Device: " + displayDevice + "\n";
                if (!string.IsNullOrEmpty(displayDate)) sTxt += "Date: " + displayDate + "\n";
                if (!string.IsNullOrEmpty(displaySource)) sTxt += "Source: " + displaySource + "\n";
                if (!string.IsNullOrEmpty(sMessage)) sTxt += "Message:\n" + sMessage + "\n";
                return sTxt;
            }
        }

        public class JedenFiltr
        {
            public string sPackageName { get; set; }
            public string sTitle { get; set; }
            public string sText { get; set; }

            public JedenFiltr(string packageName, string title, string text)
            {
                sPackageName = packageName;
                sTitle = title;
                sText = text;
            }

        }

    }
}
